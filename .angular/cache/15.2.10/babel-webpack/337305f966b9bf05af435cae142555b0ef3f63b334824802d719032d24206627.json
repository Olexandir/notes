{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"./abc.directive\";\nimport * as i3 from \"./pipe\";\nfunction AppComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.str, \"\\n\");\n  }\n}\nfunction AppComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    i0.ɵɵproperty(\"abcDir\", i_r3)(\"dec\", 2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r2, \" \");\n  }\n}\nexport class AppComponent {\n  constructor() {\n    this.a = true;\n    this.str = \"STRING\";\n    this.nums = [\"abc\", \"abf\", \"abf\", \"abf\", \"abf\", \"abf\", \"abf\", \"abf\", \"abf\"];\n  }\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    //Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.\n    //Add '${implements OnChanges}' to the class.\n  }\n  delete() {}\n  add() {}\n  ngDoCheck() {\n    //Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.\n    //Add 'implements DoCheck' to the class.\n  }\n  ngAfterContentInit() {\n    //Called after ngOnInit when the component's or directive's content has been initialized.\n    //Add 'implements AfterContentInit' to the class.\n  }\n  ngAfterContentChecked() {\n    //Called after every check of the component's or directive's content.\n    //Add 'implements AfterContentChecked' to the class.\n  }\n  ngAfterViewInit() {\n    //Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.\n    //Add 'implements AfterViewInit' to the class.\n  }\n  ngAfterViewChecked() {\n    //Called after every check of the component's view. Applies to components only.\n    //Add 'implements AfterViewChecked' to the class.\n  }\n  ngOnDestroy() {\n    //Called once, before the instance is destroyed.\n    //Add 'implements OnDestroy' to the class.\n  }\n  static #_ = this.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 6,\n    vars: 5,\n    consts: [[4, \"ngIf\"], [1, \"container\"], [\"class\", \"\", 3, \"abcDir\", \"dec\", 4, \"ngFor\", \"ngForOf\"], [1, \"\", 3, \"abcDir\", \"dec\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1);\n        i0.ɵɵpipe(2, \"appPipe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, AppComponent_div_3_Template, 2, 1, \"div\", 0);\n        i0.ɵɵelementStart(4, \"div\", 1);\n        i0.ɵɵtemplate(5, AppComponent_div_5_Template, 2, 3, \"div\", 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 3, ctx.str));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.a);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.nums);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.ABCDirective, i3.AppPipe],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;;IAEAA,2BAAe;IACbA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,4CACF;;;;;IAEEA,8BAA8E;IAC5EA,YACF;IAAAA,iBAAM;;;;;IAFiDA,6BAAY;IACjEA,eACF;IADEA,wCACF;;;ACDF,OAAM,MAAOC,YAAY;EAMvBC;IALO,MAAC,GAAG,IAAI;IACR,QAAG,GAAG,QAAQ;IAEd,SAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EAE9D;EACfC,QAAQ,IAAU;EAElBC,WAAW,CAACC,OAAsB;IAChC;IACA;EAAA;EAGMC,MAAM,IAAU;EACjBC,GAAG,IAAU;EAEpBC,SAAS;IACP;IACA;EAAA;EAGFC,kBAAkB;IAChB;IACA;EAAA;EAEFC,qBAAqB;IACnB;IACA;EAAA;EAGFC,eAAe;IACb;IACA;EAAA;EAGFC,kBAAkB;IAChB;IACA;EAAA;EAGFC,WAAW;IACT;IACA;EAAA;EACD;qBA5CUZ,YAAY;EAAA;EAAA;UAAZA,YAAY;IAAAa;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDPzBnB,yBAAG;QAAAA,YAAmB;;QAAAA,iBAAI;QAE1BA,6DAEM;QACNA,8BAAuB;QACrBA,6DAEM;QACRA,iBAAM;;;QATHA,eAAmB;QAAnBA,mDAAmB;QAEhBA,eAAO;QAAPA,4BAAO;QAIoBA,eAAS;QAATA,kCAAS","names":["i0","AppComponent","constructor","ngOnInit","ngOnChanges","changes","delete","add","ngDoCheck","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnDestroy","selectors","features","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/user/notes/src/app/app.component.html","/home/user/notes/src/app/app.component.ts"],"sourcesContent":["<p>{{ str | appPipe }}</p>\n\n<div *ngIf=\"a\">\n  {{ str }}\n</div>\n<div class=\"container\">\n  <div class=\"\" *ngFor=\"let item of nums; let i = index\" [abcDir]=\"i\" [dec]=\"2\">\n    {{ item }}\n  </div>\n</div>\n","import { Component, OnInit, SimpleChanges } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.scss\"],\n})\nexport class AppComponent implements OnInit {\n  public a = true;\n  public str = \"STRING\";\n\n  public nums = [\"abc\", \"abf\", \"abf\", \"abf\", \"abf\", \"abf\", \"abf\", \"abf\", \"abf\"];\n\n  constructor() {}\n  ngOnInit(): void {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    //Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.\n    //Add '${implements OnChanges}' to the class.\n  }\n\n  private delete(): void {}\n  public add(): void {}\n\n  ngDoCheck(): void {\n    //Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.\n    //Add 'implements DoCheck' to the class.\n  }\n\n  ngAfterContentInit(): void {\n    //Called after ngOnInit when the component's or directive's content has been initialized.\n    //Add 'implements AfterContentInit' to the class.\n  }\n  ngAfterContentChecked(): void {\n    //Called after every check of the component's or directive's content.\n    //Add 'implements AfterContentChecked' to the class.\n  }\n\n  ngAfterViewInit(): void {\n    //Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.\n    //Add 'implements AfterViewInit' to the class.\n  }\n\n  ngAfterViewChecked(): void {\n    //Called after every check of the component's view. Applies to components only.\n    //Add 'implements AfterViewChecked' to the class.\n  }\n\n  ngOnDestroy(): void {\n    //Called once, before the instance is destroyed.\n    //Add 'implements OnDestroy' to the class.\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}